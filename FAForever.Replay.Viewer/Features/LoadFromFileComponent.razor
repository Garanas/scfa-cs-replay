
@inherits ReactiveComponentBase;

@inject ReplayService replayService;
@inject ISnackbar Snackbar;
@inject IDialogService DialogService;
@inject NavigationManager NavigationManager;


<MudStack Style="width: 100%; height: 100%">

    <MudFileUpload T="IBrowserFile"
                   @ref="@_fileUpload"
                   MaximumFileCount="1"
                   OnFilesChanged="OnInputFileChanged"
                   Hidden="@false"
                   InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                   InputStyle="opacity:0"
                   tabindex="-1"
                   Accept=".scfareplay, .fafreplay"
                   @ondrop="@ClearDragClass"
                   @ondragenter="@SetDragClass"
                   @ondragleave="@ClearDragClass"
                   @ondragend="@ClearDragClass">
        <ActivatorContent>
            <MudPaper Height="300px"
                      Outlined="true"
                      Class="@_dragClass">
                <MudText Typo="Typo.h6">
                    Drag and drop a replay here or click/tap to find one
                </MudText>
                @if (file != null)
                {
                    <MudChip T="string"
                             Color="Color.Dark"
                             Text="@file.Name"
                             tabindex="-1" />
                }
            </MudPaper>
        </ActivatorContent>
    </MudFileUpload>
    <MudToolBar Gutters="@false"
                Class="relative d-flex justify-end gap-4">
        <MudButton Color="Color.Primary"
                   OnClick="@OpenFilePickerAsync"
                   Variant="Variant.Filled">
            Open file picker
        </MudButton>
        <MudButton Color="Color.Primary"
                   Disabled="@(file == null)"
                   OnClick="@Upload"
                   Variant="Variant.Filled">
            Load
        </MudButton>
        <MudButton Color="Color.Error"
                   Disabled="@(file == null)"
                   OnClick="@ClearAsync"
                   Variant="Variant.Filled">
            Clear
        </MudButton>
    </MudToolBar>
</MudStack>


@code {
#nullable enable

    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;
    private IBrowserFile? file = null;
    private MudFileUpload<IBrowserFile>? _fileUpload;

    private async Task ClearAsync()
    {
        await (_fileUpload?.ClearAsync() ?? Task.CompletedTask);
        this.file = null;
        ClearDragClass();
    }

    private Task OpenFilePickerAsync()
        => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        file = e.File;
    }

    private async Task<bool> LoadFromFile(IBrowserFile file)
    {
        try
        {
            if (file.Name.ToLower().EndsWith(".fafreplay"))
            {
                MemoryStream stream = new MemoryStream();
                await file.OpenReadStream(4 * 512000).CopyToAsync(stream).ConfigureAwait(false);
                stream.Position = 0;

                var dialogParameters = new DialogParameters<ReplayLoadDialog> {
                    { x => x.Stream, stream },
                    { x => x.Type, ReplayType.FAForever }
                };
                this.DialogService.ShowAsync<ReplayLoadDialog>("Load replay", dialogParameters);

                return true;
            }

            if (file.Name.ToLower().EndsWith(".scfareplay"))
            {
                MemoryStream stream = new MemoryStream();
                await file.OpenReadStream(16 * 4 * 512000).CopyToAsync(stream).ConfigureAwait(false);
                stream.Position = 0;

                var dialogParameters = new DialogParameters<ReplayLoadDialog> {
                    { x => x.Stream, stream },
                    { x => x.Type, ReplayType.SCFA }
                };
                this.DialogService.ShowAsync<ReplayLoadDialog>("Load replay", dialogParameters);
                return true;
            }
        }
        catch (Exception ex)
        {
            return false;
        }


        return false;
    }

    private async Task Upload()
    {
        if (file != null)
        {
            var success = await LoadFromFile(file);
            if (!success)
            {
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
                Snackbar.Add("Failed to load!", Severity.Error);
            }
            return;
        }

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("Nothing to load!", Severity.Info);
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
}