@inject ReplayService ReplayService;
@inject NavigationManager NavigationManager

<MudDialog>
    <TitleContent>
        Loading...
    </TitleContent>
    <DialogContent>
        <MudList T="string">
            <MudListItem Icon="@Icons.Material.Filled.Compress" Text="Compression" SecondaryText="@TranslateText(Status.Decompression, Status.DecompressionTime)" />
            <MudListItem Icon="@Icons.Material.Filled.Info" Text="Scenario" SecondaryText="@TranslateText(Status.Header, Status.HeaderTime)" />
            <MudListItem Icon="@Icons.Material.Filled.Input" Text="User input" SecondaryText="@TranslateText(Status.Body, Status.BodyTime)" />
        </MudList>

        <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7"/>
    </DialogContent>
</MudDialog>

@code {

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public ReplayType Type { get; set; }

    [Parameter]
    public MemoryStream Stream { get; set; }

    public ReplayLoadProgression Status {get;set;} = new ReplayLoadProgression();

    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private void Cancel() => MudDialog.Cancel();

    private string TranslateText(ReplayLoadStatus status, float time) {
        switch (status) {
            case ReplayLoadStatus.Success:
                return $"Done ({time.ToString("0.00")}ms)";
            case ReplayLoadStatus.NotStarted:
                return $"Not started";
            case ReplayLoadStatus.Pending:
                return $"Pending...";
            case ReplayLoadStatus.NotApplicable:
                return $"(Not applicable)";
            default:
                return "";
        }
    }

    protected override void OnInitialized() {
        this.MudDialog.SetOptions(new DialogOptions() { CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Medium });
    }

    protected override async Task OnAfterRenderAsync (bool firstRender) {
        if (!firstRender){
            return;
        }

        Progress<ReplayLoadProgression> progress = new Progress<ReplayLoadProgression>((status) => { this.Status = status; this.StateHasChanged(); Console.WriteLine(DateTime.Now);});

        await Task.Run(() => {
            switch(Type) {
                case ReplayType.FAForever:
                    ReplayService.LoadFAForeverReplay(Stream, progress);
                    break;

                case ReplayType.SCFA:
                    ReplayService.LoadSCFAReplay(Stream, progress);
                    break;

                default:
                    break;
            }
        });

        await Task.Delay(2000);

        NavigationManager.NavigateTo("/replay/chat");
    }
}