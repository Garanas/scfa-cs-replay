@inject ReplayService ReplayService;
@inject NavigationManager NavigationManager

<MudDialog>
    <TitleContent>
        Loading...
    </TitleContent>
    <DialogContent>
        <MudList T="string">
            <MudListItem Icon="@Icons.Material.Filled.Compress" Text="Compression"
                SecondaryText="@TranslateText(TimeCompression)" />
            <MudListItem Icon="@Icons.Material.Filled.Info" Text="Scenario"
                SecondaryText="@TranslateText(TimeScenario)" />
            <MudListItem Icon="@Icons.Material.Filled.Input" Text="User input"
                SecondaryText="@GetInputStatus()" />
        </MudList>

        <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />
    </DialogContent>
</MudDialog>

@code {

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public ReplayType Type { get; set; }

    [Parameter]
    public MemoryStream Stream { get; set; }

    private float? TimeMetadata = null;
    private float? TimeCompression = null;
    private float? TimeScenario = null;
    private float? TimeInput = null;
    private float? PercentageInput = null;

    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private void Cancel() => MudDialog.Cancel();

    private string TranslateText(float? time)
    {
        if (time is null) {
            return "";
        }

        return $"Done ({time.GetValueOrDefault().ToString("0.00")}ms)";
    }

    private string GetInputStatus() {
        if (TimeInput.HasValue) {
            return $"{TimeInput.GetValueOrDefault():0.00}ms";
        }

        if (PercentageInput.HasValue) {
            return $"{PercentageInput.GetValueOrDefault():0.00}%";
        }

        return "N/A";
    }

    protected override void OnInitialized()
    {
        this.MudDialog.SetOptions(new DialogOptions() { CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Medium });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        await Task.Run(async () =>
        {
            Stopwatch stopwatch = new Stopwatch();

            stopwatch.Start();
            ReplayLoadingStage stage = new ReplayLoadingStage.NotStarted(this.Stream);

            switch (Type)
            {
                case ReplayType.FAForever:
                    stage = ReplayLoader.ProcessReplayStage((ReplayLoadingStage.NotStarted)stage);
                    this.TimeMetadata = stopwatch.ElapsedMilliseconds;
                    this.StateHasChanged();
                    await Task.Delay(10);

                    stage = ReplayLoader.ProcessReplayStage((ReplayLoadingStage.WithMetadata)stage);
                    this.TimeCompression = stopwatch.ElapsedMilliseconds;
                    this.StateHasChanged();
                    await Task.Delay(10);
                    break;

                case ReplayType.SCFA:
                    stage = new ReplayLoadingStage.Decompressed(Stream, null);
                    break;

                default:
                    break;
            }

            stage = ReplayLoader.ProcessReplayStage((ReplayLoadingStage.Decompressed)stage);
            this.TimeScenario = stopwatch.ElapsedMilliseconds;
            this.StateHasChanged();
            await Task.Delay(1);

            stage = ReplayLoader.ProcessReplayStage((ReplayLoadingStage.WithScenario)stage);

            while (stage is ReplayLoadingStage.AtInput inputStage) {
                this.PercentageInput = (float)(inputStage.BodyInvariant.PercentageProcessed);
                this.StateHasChanged();
                await Task.Delay(1);

                stage = ReplayLoader.ProcessReplayStage(inputStage);
                await Task.Delay(1);
            }

            this.TimeInput = stopwatch.ElapsedMilliseconds;
            this.StateHasChanged();
            await Task.Delay(1);

            if (stage is ReplayLoadingStage.Complete completed)
            {
                Replay replay = new Replay(completed.Header, completed.Body);
            }
        });

        await Task.Delay(2000);

        NavigationManager.NavigateTo("/replay/chat");
    }
}